create table "public"."recipe_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "recipe_id" uuid,
    "user_id" uuid not null
);


alter table "public"."recipe_likes" enable row level security;

CREATE UNIQUE INDEX recipe_likes_pkey ON public.recipe_likes USING btree (id);

alter table "public"."recipe_likes" add constraint "recipe_likes_pkey" PRIMARY KEY using index "recipe_likes_pkey";

alter table "public"."recipe_likes" add constraint "recipe_likes_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipe_creation_prototype(id) ON DELETE CASCADE not valid;

alter table "public"."recipe_likes" validate constraint "recipe_likes_recipe_id_fkey";

alter table "public"."recipe_likes" add constraint "recipe_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."recipe_likes" validate constraint "recipe_likes_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_liked_by_current_user(rec recipe_creation_prototype)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$SELECT EXISTS (
    SELECT 1 FROM recipe_likes
    WHERE recipe_id = rec.id AND user_id = auth.uid()  -- assuming auth.uid() returns current user's ID
  );$function$
;

CREATE OR REPLACE FUNCTION public.set_user_id_from_jwt()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.user_id := auth.uid();  -- grabs from JWT claims
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."recipe_likes" to "anon";

grant insert on table "public"."recipe_likes" to "anon";

grant references on table "public"."recipe_likes" to "anon";

grant select on table "public"."recipe_likes" to "anon";

grant trigger on table "public"."recipe_likes" to "anon";

grant truncate on table "public"."recipe_likes" to "anon";

grant update on table "public"."recipe_likes" to "anon";

grant delete on table "public"."recipe_likes" to "authenticated";

grant insert on table "public"."recipe_likes" to "authenticated";

grant references on table "public"."recipe_likes" to "authenticated";

grant select on table "public"."recipe_likes" to "authenticated";

grant trigger on table "public"."recipe_likes" to "authenticated";

grant truncate on table "public"."recipe_likes" to "authenticated";

grant update on table "public"."recipe_likes" to "authenticated";

grant delete on table "public"."recipe_likes" to "service_role";

grant insert on table "public"."recipe_likes" to "service_role";

grant references on table "public"."recipe_likes" to "service_role";

grant select on table "public"."recipe_likes" to "service_role";

grant trigger on table "public"."recipe_likes" to "service_role";

grant truncate on table "public"."recipe_likes" to "service_role";

grant update on table "public"."recipe_likes" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."recipe_likes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."recipe_likes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."recipe_likes"
as permissive
for select
to public
using (true);


CREATE TRIGGER set_user_id_before_insert BEFORE INSERT ON public.recipe_likes FOR EACH ROW EXECUTE FUNCTION set_user_id_from_jwt();


