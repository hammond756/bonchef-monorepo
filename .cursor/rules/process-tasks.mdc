---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One sub-task at a time:** Do **NOT** start the next sub‑task until you ask the user for permission and they say “yes” or "y"
- **Sub-task completion protocol:**  
  1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.  
- Stop after each sub‑task and wait for the user’s go‑ahead.

## Parent Task Completion Workflow
1. Once all sub-tasks for a parent task are complete, mark the **parent task** as completed `[x]`.
2. Confirm with the user that the code is in a working, stable, and reviewable state.
3. Suggest the following workflow to the developer:
    - **Commit changes:** `git commit -m "feat: Complete [Parent Task Title]"`
    - **Create a Pull Request:** "Create a Pull Request for this completed task to merge the changes."
    - **Start a new branch:** "Create a new branch for the next task to keep the work isolated. The new branch should be based on `main`/`master` or the previous feature branch, depending on dependencies."

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the “Relevant Files” section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub‑task** `[x]`.
   - After all sub-tasks are complete, follow the **Parent Task Completion Workflow**.
3. Add newly discovered tasks.
4. Keep “Relevant Files” accurate and up to date.
5. Before starting work, check which sub‑task is next.
6. After implementing a sub‑task, update the file and then pause for user approval.